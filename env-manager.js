#!/usr/bin/env node

/**
 * Quirkly Extension Environment Manager
 * Simple script to manage environment variables for the extension
 */

const fs = require('fs');
const path = require('path');

// Colors for console output
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// Default environment configuration
const defaultConfig = {
  development: {
    EXT_ENV: 'development',
    DEV_BASE_URL: 'http://localhost:3000',
    DEV_DASHBOARD_URL: 'http://localhost:3000',
    AUTH_ENDPOINT: '/api/auth/validate',
    REPLY_ENDPOINT: '/api/reply/generate',
    PROFILE_ENDPOINT: '/api/profile/extract'
  },
  production: {
    EXT_ENV: 'production',
    PROD_BASE_URL: 'https://quirkly.technioz.com',
    PROD_DASHBOARD_URL: 'https://quirkly.technioz.com',
    AUTH_ENDPOINT: '/api/auth/validate',
    REPLY_ENDPOINT: '/api/reply/generate',
    PROFILE_ENDPOINT: '/api/profile/extract'
  }
};

function loadEnvFile() {
  const envPath = path.join(__dirname, 'extension.env');
  const env = {};
  
  if (fs.existsSync(envPath)) {
    const content = fs.readFileSync(envPath, 'utf8');
    content.split('\n').forEach(line => {
      const trimmed = line.trim();
      if (trimmed && !trimmed.startsWith('#')) {
        const [key, ...valueParts] = trimmed.split('=');
        if (key && valueParts.length > 0) {
          env[key.trim()] = valueParts.join('=').trim();
        }
      }
    });
  }
  
  return env;
}

function saveEnvFile(env) {
  const envPath = path.join(__dirname, 'extension.env');
  const content = Object.entries(env)
    .map(([key, value]) => `${key}=${value}`)
    .join('\n');
  
  fs.writeFileSync(envPath, content);
  log(`Environment file updated: ${envPath}`, 'green');
}

function generateConfig(environment) {
  const env = loadEnvFile();
  const config = defaultConfig[environment];
  
  // Merge with loaded environment variables
  const finalConfig = { ...config, ...env };
  const timestamp = new Date().toISOString();
  
  const configContent = `// Quirkly Extension Configuration - DYNAMIC RUNTIME CONFIG
// This file is dynamically generated by build scripts based on extension.env
// Generated on ${timestamp} for ${environment.toUpperCase()} environment

const QuirklyConfig = {
  // Environment variables - injected at build time
  _envVars: {
    EXT_ENV: '${finalConfig.EXT_ENV || environment}',
    DEV_BASE_URL: '${finalConfig.DEV_BASE_URL || 'http://localhost:3000'}',
    DEV_DASHBOARD_URL: '${finalConfig.DEV_DASHBOARD_URL || 'http://localhost:3000'}',
    PROD_BASE_URL: '${finalConfig.PROD_BASE_URL || 'https://quirkly.technioz.com'}',
    PROD_DASHBOARD_URL: '${finalConfig.PROD_DASHBOARD_URL || 'https://quirkly.technioz.com'}',
    AUTH_ENDPOINT: '${finalConfig.AUTH_ENDPOINT || '/api/auth/validate'}',
    REPLY_ENDPOINT: '${finalConfig.REPLY_ENDPOINT || '/api/reply/generate'}',
    PROFILE_ENDPOINT: '${finalConfig.PROFILE_ENDPOINT || '/api/profile/extract'}'
  },

  // Environment detection - truly dynamic based on injected vars
  isDevelopment: function() {
    return this._envVars.EXT_ENV === 'development';
  },

  // Get current environment configuration - truly dynamic
  getConfig: function() {
    const isDev = this.isDevelopment();
    
    const config = {
      environment: isDev ? 'development' : 'production',
      baseUrl: isDev ? this._envVars.DEV_BASE_URL : this._envVars.PROD_BASE_URL,
      dashboardUrl: isDev ? this._envVars.DEV_DASHBOARD_URL : this._envVars.PROD_DASHBOARD_URL,
      authEndpoint: this._envVars.AUTH_ENDPOINT,
      replyEndpoint: this._envVars.REPLY_ENDPOINT,
      profileEndpoint: this._envVars.PROFILE_ENDPOINT,
      isDev: isDev
    };

    // Build full URLs
    config.authUrl = config.baseUrl + config.authEndpoint;
    config.replyUrl = config.baseUrl + config.replyEndpoint;
    config.profileUrl = config.baseUrl + config.profileEndpoint;

    return config;
  },

  // Get specific URLs - truly dynamic
  getAuthUrl: function() {
    return this.getConfig().authUrl;
  },

  getReplyUrl: function() {
    return this.getConfig().replyUrl;
  },

  getDashboardUrl: function() {
    return this.getConfig().dashboardUrl;
  },

  getProfileUrl: function() {
    return this.getConfig().profileUrl;
  },

  // Debug info
  getEnvironmentInfo: function() {
    const config = this.getConfig();
    
    console.log('Quirkly Environment Info (DYNAMIC):', {
      environment: config.environment,
      authUrl: config.authUrl,
      replyUrl: config.replyUrl,
      dashboardUrl: config.dashboardUrl,
      extEnv: this._envVars.EXT_ENV,
      isDevelopment: this.isDevelopment(),
      buildTime: '${timestamp}'
    });
    return config;
  }
};

// Make it available globally
if (typeof window !== 'undefined') {
  window.QuirklyConfig = QuirklyConfig;
}

// Export for modules (if needed)
if (typeof module !== 'undefined' && module.exports) {
  module.exports = QuirklyConfig;
}`;

  return configContent;
}

function showHelp() {
  log('\nüöÄ Quirkly Extension Environment Manager', 'blue');
  log('Usage:', 'yellow');
  log('  node env-manager.js <command> [options]', 'reset');
  log('\nCommands:', 'yellow');
  log('  set <environment>     Set environment (development|production)', 'reset');
  log('  show                 Show current environment configuration', 'reset');
  log('  dev                  Set to development environment', 'reset');
  log('  prod                 Set to production environment', 'reset');
  log('  help                 Show this help message', 'reset');
  log('\nExamples:', 'yellow');
  log('  node env-manager.js dev', 'reset');
  log('  node env-manager.js prod', 'reset');
  log('  node env-manager.js set development', 'reset');
  log('  node env-manager.js show', 'reset');
}

function main() {
  const args = process.argv.slice(2);
  const command = args[0];
  
  if (!command || command === 'help') {
    showHelp();
    return;
  }
  
  switch (command) {
    case 'set':
      const environment = args[1];
      if (!environment || !['development', 'production'].includes(environment)) {
        log('‚ùå Invalid environment. Use "development" or "production"', 'red');
        return;
      }
      
      log(`üîß Setting environment to: ${environment}`, 'blue');
      const env = loadEnvFile();
      env.EXT_ENV = environment;
      saveEnvFile(env);
      
      // Generate config.js
      const configContent = generateConfig(environment);
      fs.writeFileSync(path.join(__dirname, 'config.js'), configContent);
      log('‚úÖ Configuration updated', 'green');
      break;
      
    case 'dev':
      log('üîß Setting environment to: development', 'blue');
      const devEnv = loadEnvFile();
      devEnv.EXT_ENV = 'development';
      saveEnvFile(devEnv);
      
      const devConfig = generateConfig('development');
      fs.writeFileSync(path.join(__dirname, 'config.js'), devConfig);
      log('‚úÖ Development configuration set', 'green');
      break;
      
    case 'prod':
      log('üîß Setting environment to: production', 'blue');
      const prodEnv = loadEnvFile();
      prodEnv.EXT_ENV = 'production';
      saveEnvFile(prodEnv);
      
      const prodConfig = generateConfig('production');
      fs.writeFileSync(path.join(__dirname, 'config.js'), prodConfig);
      log('‚úÖ Production configuration set', 'green');
      break;
      
    case 'show':
      const currentEnv = loadEnvFile();
      log('\nüìã Current Environment Configuration:', 'blue');
      log(`Environment: ${currentEnv.EXT_ENV || 'not set'}`, 'yellow');
      log(`Dev Base URL: ${currentEnv.DEV_BASE_URL || 'http://localhost:3000'}`, 'yellow');
      log(`Prod Base URL: ${currentEnv.PROD_BASE_URL || 'https://quirkly.technioz.com'}`, 'yellow');
      log(`Dev Dashboard: ${currentEnv.DEV_DASHBOARD_URL || 'http://localhost:3000'}`, 'yellow');
      log(`Prod Dashboard: ${currentEnv.PROD_DASHBOARD_URL || 'https://quirkly.technioz.com'}`, 'yellow');
      break;
      
    default:
      log(`‚ùå Unknown command: ${command}`, 'red');
      showHelp();
  }
}

main();
